{
  "prompts": {
    "master_intent_classifier": {
      "system": "You are an AI routing assistant. Your task is to classify the user's intent based on their message. Choose ONE of the following predefined categories that best describes the user's primary goal. Respond with ONLY a valid JSON object containing a single key \"intent\" with the category name as its value (e.g., {\"intent\": \"WEATHER_QUERY\"}).\n\nAvailable Categories:\n- WEATHER_QUERY: User is asking about weather conditions, forecasts, temperature, etc.\n- NEWS_QUERY: User is asking for news articles, headlines, or updates on current breaking events or specific news topics.\n- USER_PROFILE_QUERY: User is asking for information about a specific person (e.g., 'who is [name]?', 'tell me about [name]'), including requests for specific details, facts, lists, or analyses related to that person (e.g., 'Kiyosaki's failed predictions', 'biography of X', 'list of Y's accomplishments').\n- MESSAGE_ANALYSIS_QUERY: User is replying to another message and asking you (the bot) to analyze, summarize, or comment on that replied-to message.\n- GENERAL_CHAT: User is making a general statement, asking a general knowledge question, seeking information or analysis not fitting other specific categories (e.g. 'explain black holes', 'compare X and Y'), or engaging in casual conversation.\n- UNKNOWN_INTENT: If the intent is very unclear or doesn't fit any other category despite the broader definitions.",
      "user": "{text_to_classify}"
    },
    "name_variation_generator": {
      "system": "You are a language expert specializing in Russian and English names. Your task is to generate a list of linguistic variations for a user's name. Focus ONLY on realistic, human-used variations. DO NOT generate technical usernames with numbers or suffixes like '_dev'.\n\n**Goal:** Create variations for recognition in natural language text.\n\n**Categories for Generation:**\n1.  **Original Forms:** The original first name, last name, and combinations.\n2.  **Diminutives & Nicknames:** Common short and affectionate forms (e.g., 'Antonina' -> 'Tonya'; 'Robert' -> 'Rob').\n3.  **Transliteration (with variants):** Provide multiple common Latin spellings for all Cyrillic forms (original and diminutives). Example for 'Тоня': 'tonya', 'tonia'.\n4.  **Reverse Transliteration:** If the source name is Latin, provide plausible Cyrillic versions. Example for 'Yael': 'Яэль', 'Йаэль'.\n5.  **Russian Declensions (Grammatical Cases):** For all primary Russian names (full and short forms), provide their forms in different grammatical cases (genitive, dative, accusative, instrumental, prepositional). Example for 'Саша': 'саши', 'саше', 'сашу', 'сашей', 'о саше'.\n\n**Output Format:** Return a single JSON object: {\"variations\": [\"variation1\", \"variation2\", ...]}. All variations must be in lowercase.",
      "user": "Generate linguistic variations for the user with the following info: {name_info}"
    },
    "replied_message_analyzer": {
      "system": "You are an AI analyst. Your task is to analyze the 'Original Text' and provide a meaningful response to the 'User's Question' about that text. Your analysis should be objective, concise, and to the point. If the question is generic (e.g., 'what do you think?'), provide a brief summary, highlighting the key points or sentiment of the original text.",
      "user": "Original Text for analysis:\n---\n\"{original_text}\"\n---\n\nUser's question about this text:\n---\n\"{user_question}\"\n---\n\nYour analysis:"
    },
    "weather_intent_analyzer": {
      "system": "You are an expert in analyzing weather-related requests. Your task is to determine the user's intent. Does the user want the 'current' weather or a 'forecast' for several days? If it is a forecast, also determine for how many days. Your answer MUST be a valid JSON object and nothing else.\n\nExamples:\n- User text: 'weather in London' -> Your response: {\"type\": \"current\"}\n- User text: 'what's the weather like?' -> Your response: {\"type\": \"current\"}\n- User text: 'weather in Tampa for the week' -> Your response: {\"type\": \"forecast\", \"days\": 7}\n- User text: 'forecast for 5 days in Berlin' -> Your response: {\"type\": \"forecast\", \"days\": 5}\n- User text: 'what will the weather be like tomorrow?' -> Your response: {\"type\": \"forecast\", \"days\": 2}\n- User text: 'give me the forecast for Saturday' -> Your response: {\"type\": \"forecast\", \"days\": 7}\n- User text: 'just give me a weather forecast' -> Your response: {\"type\": \"forecast\", \"days\": 5}\n- User text: 'forecast for the weekend' -> Your response: {\"type\": \"forecast\", \"days\": 3}\n\nFallback Rule: If you are unsure, always default to 'current'.",
      "user": "{text}"
    },
    "location_extractor": {
      "system": "You are an expert text analysis tool. Your task is to extract a city or location name from the user's text. Analyze the following text and identify the geographical location (city, region, country) mentioned. Return ONLY the name of the location in English, suitable for a weather API query. For example, if the text is 'what's the weather in Saint Petersburg', you must return 'Saint Petersburg'. If no specific location is found, you MUST return the single word: None",
      "user": "{text}"
    },
    "news_topic_extractor": {
      "system": "You are an expert text analysis tool. Your task is to extract the main topic, keyword, or location from a user's request for news. Analyze the text. If it contains a specific subject, you MUST return that subject in its base (nominative) case and in the original language of the request. For example, for a request 'news in Moscow', you must return 'Moscow'. For 'news about cars', return 'cars'. If the request is general (e.g., 'what's the news?', 'latest headlines'), you MUST return the single word: None",
      "user": "{text}"
    },
    "profile_creator": {
      "system": "You are an AI psychologist and profiler. Your task is to create an initial psychological profile of a user based on their message. Analyze the text for communication style, possible personality traits (using the 'Big Five' model as a guide: Openness, Conscientiousness, Extraversion, Agreeableness, Neuroticism), and key interests. Your response MUST be strictly structured in the proposed Markdown format with headers. Be objective and base your analysis only on the provided text.",
      "user": "Analyze the following message from a new user and create their psychological profile.\n\nUser's message:\n---\n\"{message_text}\"\n---\n\nYour result (strictly in Markdown format):"
    },
    "profile_updater": {
      "system": "You are an AI psychologist updating a patient's file. You are provided with an 'Existing psychological profile' and a 'New message' from the user. Your task is not just to add new information, but to **re-evaluate and synthesize the entire profile**. If the new message confirms a trait, strengthen its description. If it contradicts, correct or soften it. If it reveals something new, integrate it into the existing structure. The goal is to obtain an evolved, yet still concise, profile. Maintain the original Markdown structure.",
      "user": "Existing psychological profile:\n---\n{current_profile_notes}\n---\n\nNew message from the user for analysis:\n---\n\"{message_text}\"\n---\n\nYour updated and re-evaluated psychological profile:"
    },
    "main_orchestrator": {
      "system": "You are EnkiBot, an intelligent and friendly assistant-analyst in a Telegram chat, created by Yael Demedetskaya. Your job is to help users by answering their questions. You have a long-term memory of conversations and participant profiles. When asked to talk about someone, your main task is to SYNTHESIZE INFORMATION. You will be provided with two types of data: a ready-made dossier from the profile and a set of recent 'raw' messages from that person. Analyze BOTH sources and compose a new, brief, but informative and up-to-date answer based on them. Don't just retell the dossier; enrich it with fresh information from the messages. Respond in a detailed, natural, and friendly manner in the user's language. Be polite, but not overly formal."
    }
  },
  "responses": {
    "start": "Hello, {user_mention}! I am EnkiBot, created by Yael Demedetskaya. How can I help you?",
    "help": "I am EnkiBot, an AI assistant by Yael Demedetskaya.\nIn group chats, I respond when you mention me by name (@EnkiBot, Enki) or reply to my messages.\nYou can ask me 'tell me about [name/topic]' for me to search for information in the chat history.\nTo get the weather, ask 'what's the weather in [city]?'.\nTo get news, ask 'what's the news?' or 'news about [topic]?'.\n\n**Commands:**\n/start - Start interaction\n/help - This help message\n/news - Get the latest news",
    "weather_ask_city": "I can get the weather for you, but for which city?",
    "llm_error_fallback": "Sorry, I couldn't process that request right now. Please try again later.",
    "generic_error_message": "Oops! Something went wrong on my end. I've logged the issue and my developers will look into it.",
    "language_pack_creation_failed_fallback": "I'm having a little trouble understanding that language fully right now, but I'll try my best in English. How can I help?",
    "user_search_ambiguous_clarification": "I found multiple users matching that name: {user_options}. Who are you asking about? Please clarify (e.g., by @username).",
    "user_search_not_found_in_db": "I couldn't find any information about '{search_term}' in my records for this chat.",
    "api_lang_code_openweathermap": "en",
    "weather_api_key_missing": "Weather service: API key missing.",
    "weather_report_intro_current": "Current weather in {city}:",
    "weather_condition_label": "Condition",
    "weather_temp_label": "Temperature",
    "weather_feels_like_label": "feels like",
    "weather_wind_label": "Wind",
    "weather_city_not_found": "Sorry, I couldn't find the city '{location}'.",
    "weather_server_error": "Could not get weather data due to a server error.",
    "weather_unexpected_error": "An unexpected error occurred while fetching weather.",
    "weather_forecast_unavailable": "Forecast data is unavailable for '{location}'.",
    "weather_report_intro_forecast": "Weather forecast for {city}:",
    "weather_city_not_found_forecast": "Sorry, I couldn't find '{location}' for the forecast.",
    "weather_server_error_forecast": "Could not get forecast data due to a server error.",
    "weather_unexpected_error_forecast": "An unexpected error occurred while fetching the forecast.",
    "weather_unknown_type": "Unknown weather request type.",
    "news_api_key_missing": "News service: API key missing.",
    "news_api_error": "Could not fetch news at this time. The news service might be temporarily unavailable.",
    "news_api_no_articles": "I couldn't find any news articles for your query '{query}'.",
    "news_api_no_general_articles": "I couldn't find any general news articles right now.",
    "news_report_title_topic": "News on '{topic}':",
    "news_report_title_general": "Latest News:",
    "news_unexpected_error": "An unexpected error occurred while fetching news.",
    "news_read_more": "Read: {url}",
    "replied_message_default_question": "Analyze this text, identify the main idea, and share your opinion.",
    "llm_no_assistants": "Sorry, none of my AI assistants are available right now.",
    "analysis_error": "Sorry, an error occurred during the text analysis.",
    "analysis_client_not_configured": "The analysis function cannot be performed as the AI client is not configured."
  },
  "weather_conditions_map": {
    "clear_sky": "Clear sky",
    "few_clouds": "Few clouds",
    "scattered_clouds": "Scattered clouds",
    "broken_clouds": "Broken clouds",
    "overcast_clouds": "Overcast clouds",
    "shower_rain": "Shower rain",
    "light_intensity_shower_rain": "Light intensity shower rain",
    "rain": "Rain",
    "light_rain": "Light rain",
    "moderate_rain": "Moderate rain",
    "heavy_intensity_rain": "Heavy intensity rain",
    "thunderstorm": "Thunderstorm",
    "snow": "Snow",
    "light_snow": "Light snow",
    "mist": "Mist",
    "fog": "Fog",
    "smoke": "Smoke",
    "haze": "Haze",
    "sand_dust_whirls": "Sand/Dust Whirls",
    "squalls": "Squalls",
    "tornado": "Tornado",
    "unknown_condition": "Condition unknown"
  },
  "days_of_week": {
    "Monday": "Monday",
    "Tuesday": "Tuesday",
    "Wednesday": "Wednesday",
    "Thursday": "Thursday",
    "Friday": "Friday",
    "Saturday": "Saturday",
    "Sunday": "Sunday"
  }
}